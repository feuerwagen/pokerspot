<?php
/**
* Backend controller for the user module.
* 
* @uses: BackendController
* @author: Elias Müller
* @version: 0.5
* @since: chispa 0.5a
* @package: core
* @subpackage: backend
*/

define('SALT_LENGTH', 15);

require_once("classes/backend_controller.class.php");

class Users extends BackendController {
	/**
    * Returns the section of the main menu, which is currently active
    * @return string The name of the section
    */
    protected function getSection() {
        return 'config';
    }

	/**
	 * generate the title for the page
	 *
	 * @param string title Existing title (i.e. generated by modules)
 	 * @return string Title for the page
	 * @author Elias Müller
	 **/
	protected function generateTitle($title = '') {
		switch ($this->s->action) {
			case 'list':
				$title = 'Benutzer';
				break;
			case 'logout':
				$title = 'Anmeldung';
				break;
		}
		return parent::generateTitle($title);
	}

	/**
    * Build site content depending on requested action.
    */  
    protected function buildSite() {
        switch ($this->s->action) {
            case 'self':
				if ($this->s->element !== $this->s->user->username) {
					Error::addError('Fehler: Dein Benutzername stimmt nicht mit dem des Formularaufrufs überein!');
					break;
				}
			case 'update':
				$user = User::getInstance($this->s->element);
				$content = $this->getUserForm($user);
				break;
			case 'create':
				$content = $this->getUserForm();
				break;
			case 'list':
                $content = $this->listUsers();
                break;
			case 'delete':
				$user = User::getInstance($this->s->element);
				$content = 'Möchtest du den Benutzer <strong>'.$user->realname.'</strong> wirklich löschen?<input type="hidden" value="form/user/delete/'.$this->s->element.'.html" />';
				break;
            case 'logout':
				session_destroy();
                $this->s->user = '';
				Error::addMessage('Du hast dich erfolgreich abgemeldet. Auf Wiedersehen!');
                break;
            case 'login':
			default:
                break; 
        }
		parent::buildSite($content);
    }
    
    /**
    * Handle form action
    */
    protected function formAction() {
		$this->escapeFormVars();
		
        switch ($this->s->action) {
			case "create":
				$user = User::getInstance($this->vars['username']);
				$user->realname = $this->vars['realname'];
				$user->email = $this->vars['email'];
				$user->password = $this->generateHash($this->vars['password']);
				$user->idstatus = $this->vars['status'];
				if ($user->save()) {
					Error::addMessage('Die Änderungen wurden erfolgreich gespeichert!');
					$this->form['reload'] = array('user' => array('users'));
					return true;
				}
				break;
			case "self":
				$this->s->user->realname = $this->vars['realname'];
				$this->s->user->email = $this->vars['email'];
				if ($this->vars['password'] != '') $this->s->user->password = $this->generateHash($this->vars['password']);
				if ($this->vars['status'] != '') $this->s->user->idstatus = $this->vars['status'];
				if ($this->s->user->save()) {
					Error::addMessage('Die Änderungen wurden erfolgreich gespeichert!');
					$this->form['reload'] = array('user' => array('user', 'users'));
					return true;
				}
				break;
			case "update":
				$user = User::getInstance($this->vars['username']);
				$user->realname = $this->vars['realname'];
				$user->email = $this->vars['email'];
				if ($this->vars['password'] != '') $user->password = $this->generateHash($this->vars['password']);
				if ($this->vars['status'] != '') $user->idstatus = $this->vars['status'];
				if ($user->save()) {
					Error::addMessage('Die Änderungen wurden erfolgreich gespeichert!');
					$this->form['reload'] = array('user' => array('user', 'users'));
					return true;
				}
				break;
			case 'delete':
				$user = User::getInstance($this->s->element);
				$name = $user->realname;
				if ($user->delete()) {
					Error::addMessage('Der Benutzer '.$name.' wurde erfolgreich gelöscht!');
					$this->form['reload'] = array('user' => array('users'));
					return true;
				}
				break;
            case "login":
                return $this->login($this->vars["username"], $this->vars["password"]);
                break;
			case 'reload':
				switch($this->s->element) {
					case 'users': // user table
						echo $this->listUsers();
						break;
					case 'user': // user info
						echo '<a href="admin/user/self/'.$this->s->user->username.'.html?width=600&height=500" class="dialog form" title="Benutzer bearbeiten">'.$this->s->user->realname.'</a> <a href="admin/user/logout" id="logout"></a>';
						break;
					default:
						Error::addError('Fehler: Element nicht gefunden!');
						return false;
				}
				return true;
				break;
        }
		return false;
    }
	
	/**
	 * generate a salted password hash
	 *
	 * @param string $password the plain password
	 * @param string $salt the salted password hash for password comparison -> use same salt for hash
	 * @return string the salted password hash
	 */
	private function generateHash($password, $salt = null) {
	    if ($salt === null)
	        $salt = substr(md5(uniqid(rand(), true)), 0, SALT_LENGTH);
	    else
	        $salt = substr($salt, 0, SALT_LENGTH);

	    return $salt.sha1($salt.$password);
	}
    
    /**
     * login to the backend system
     *
     * @param string $username
     * @param string $password
     */ 
    public function login($username, $password) {
		session_start();
		$user = User::getInstance($username);
        //Error::addMessage($this->generateHash($password));
        if ($user !== false) {
			$hash = $this->generateHash($password, $user->password);
			if ($hash == $user->password) {
				$_SESSION['loggedin'] = $username;

	            // set datetime of login
				$user->last_login = $user->current_login;
				$user->current_login = date("Y-m-d H:i:s");
				$user->save();

	            // redirect to previous page
	            $hostname = $_SERVER['HTTP_HOST'];
	            $path = dirname($_SERVER['PHP_SELF']);

	            header('Location: http://'.$hostname.(($path == '/') ? '' : $path).'/'.(($this->s->config['site']['has_frontend'] === true) ? 'admin/' : '').$this->s->post["path"]);
	            return true;
			}
		}
        
        $_SESSION['loggedin'] = 0;
        Error::addWarning("Login fehlgeschlagen! Benutzername und/oder Passwort falsch!");
        return false;
    }

    /**
     * Create user list
	 *
	 * @return string HTML-Code for user list
     */
    private function listUsers() {
		$users = User::getActiveUsers();
		
		$tpl = new Template('user');
        $tpl->assign('users', $users);
        $tpl->assign('id', $this->s->user->id);
		$tpl->assign('call', $this->s->post['call']);
        $tpl->assign('permissions', array('update' => $this->s->user->hasRights("user:update"), 'delete' => $this->s->user->hasRights("user:delete"), 'create' => $this->s->user->hasRights("user:create")));
        return $tpl->fetch('users_table.html');
    }

	/**
	 * generate form: change user info
	 *
	 * @return string html code for the form
	 * @author Elias Müller
	 **/
	private function getUserForm($user = NULL) {
		if ($this->s->user->hasRights('user:update') || $this->s->action == 'create') {
			$list_status = Group::getAll();
		} else {
			$list_status = $this->s->user->status;
		}
		
		$path = ($this->s->element != '') ? $this->s->action.'/'.$this->s->element.'.html' : $this->s->action;
		
		$tpl = new Template('user');
		$tpl->assign('user', $user);
		$tpl->assign('path', $path);
		$tpl->assign('status', $list_status);
		return $tpl->fetch('form_user.html');
	}
}
?>