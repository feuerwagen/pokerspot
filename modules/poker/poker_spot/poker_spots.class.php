<?php
/**
* Backend controller for the booking module (submodule house).
* 
* @uses: BackendController
* @author: Elias Müller
* @version: 0.1
* @since: chispa 0.5a
* @package: core
* @subpackage: backend
*/

require_once("classes/backend_controller.class.php");
require_once("poker_spot.class.php");

class PokerSpots extends BackendController {
	protected function __construct() {
		parent::__construct('poker');
	}
	
	/**
    * Returns the section of the main menu, which is currently active
    * @return string The name of the section
    */
    protected function getSection() {
		return 'poker';
    }

	/**
	 * generate the title for the page
	 *
	 * @param string title Existing title (i.e. generated by modules)
 	 * @return string Title for the page
	 * @author Elias Müller
	 **/
	protected function generateTitle($title = '') {
		switch ($this->s->action) {
			case 'list':
				$title = 'Spots';
				break;
		}
		return parent::generateTitle($title);
	}

    /**
    * Build site content depending on requested action.
    */  
    protected function buildSite() {
        switch ($this->s->action) {
			case 'list':
				$content = $this->listSpots();
				break;
			case 'create':
			case 'update':
				$content = $this->getForm($this->s->params[0]);
                break;
            case 'delete':
            $content = 'Soll dieser Spot wirklich gelöscht werden?<input type="hidden" value="form/poker/poker_spot-delete/'.$this->s->element.'" />';
            	break;
        }
        parent::buildSite($content);
    }
    /**
    * Handle form action
    */
    protected function formAction() {
        switch ($this->s->action) {
			case 'create':
				$actions = array(
					'players' => $this->vars['player'],
					'actions' => $this->vars['action'],
					'values' => $this->vars['value']
				);
				$spot = new PokerSpot(
					$this->vars['title'], 
					$this->vars['button'],
					$this->vars['stack_p1'],
					$this->vars['stack_p2'],
					$this->vars['range_p1'],
					$this->vars['range_p2']);
				if ($spot->save()) {
					$raise = 1;
					if (is_array($this->vars['player']) && count($this->vars['player']) > 0) {
						$players = array_reverse($this->vars['player'], true);
						foreach ($players as $key => $value) {
							if ($this->vars['action'][$key] == 'raise') {
								$params = array('value' => $this->vars['value'][$key], 'rel_value' => ($this->vars['value'][$key] - $raise));
								$raise = $this->vars['value'][$key];
							} elseif ($this->vars['action'][$key] == 'call') {
								$params = array('value' => $this->vars['value'][$key]);
							} else {
								$params = array();
							}
							$action = new SpotAction($spot, $this->vars['action'][$key], $params, $value);
							$action->save();
						}
					}
					Error::addMessage('Der Spot wurde erfolgreich angelegt!');
					$this->form['reload'] = array('poker' => array('poker_spot' => 'spots'));
					return true;
				}//*/
				break;
			case 'update':
				$spot = PokerSpot::getInstance($this->s->element);
				$spot->title = $this->vars['title'];
				$spot->button = $this->vars['button'];
				$spot->stacks = array($this->vars['stack_p1'], $this->vars['stack_p2']);
				$spot->ranges = array($this->vars['range_p1'], $this->vars['range_p2']);

				if ($spot->save()) {
					if (is_array($spot->actions)) {
						foreach ($spot->actions as $action) {
							$action->delete();
						}
					}
					$raise = 1;
					if (is_array($this->vars['player']) && count($this->vars['player']) > 0) {
						foreach ($this->vars['player'] as $key => $value) {
							if ($this->vars['action'][$key] == 'raise') {
								$params = array('value' => $this->vars['value'][$key], 'rel_value' => ($this->vars['value'][$key] - $raise));
								$raise = $this->vars['value'][$key];
							} elseif ($this->vars['action'][$key] == 'call') {
								$params = array('value' => $this->vars['value'][$key]);
							} else {
								$params = array();
							}
							$action = new SpotAction($spot, $this->vars['action'][$key], $params, $value);
							$action->save();
						}
					}
					Error::addMessage('Die Änderungen wurden erfolgreich gespeichert!');
					$this->form['reload'] = array('poker' => array('poker_spot' => 'spots'));
					return true;
				}
				break;
			case 'delete':
				$spot = PokerSpot::getInstance($this->s->element);
			/*	if (is_object($spot->game)) {
					Error::addError('Der Spot kann nicht gelöscht werden (Spiel ist noch aktiv)!');
					return false;
				}//*/
				if ($spot->delete()) {
					Error::addMessage('Der Spot wurde erfolgreich gelöscht!');
					$this->form['reload'] = array('poker' => array('poker_spot' => 'spots'));
					return true;
				}
				break;
			case 'reload':
				echo $this->listSpots();
				break;
        }
		return false;
    }
    
    // module-specific methods start here
	
	/**
     * Create houses list
	 *
	 * @return string HTML code for houses list
     */
    private function listSpots() {
        $db = DB::getInstance();
        $tpl = new Template('poker');

        $spots = PokerSpot::getAll();

        foreach ($spots as $spot) {
        	foreach ($spot->ranges as $key => $value) {
	        	if (is_array($value))
	        		$spot->ranges[$key] = implode(', ', $value);
	        	else
	        		$spot->ranges[$key] = '';
	        }
	        foreach ($spot->actions as $key => $value) {
	        	$value->player = $value->player+1;
	        }
	        $spot->button = $spot->button + 1; 
        }
        
        $tpl->assign('spots', $spots);
        $tpl->assign('user', $this->s->user);
		$tpl->assign('call', $this->s->post['call']);
        $tpl->assign('permissions', array(
        	'create' => $this->s->user->hasRights("poker:poker_spot-create"), 
        	'delete' => $this->s->user->hasRights("poker:poker_spot-delete"), 
        	'update' => $this->s->user->hasRights("poker:poker_spot-update"), 
        	'update_own' => $this->s->user->hasRights("poker:poker_spot-own")
        ));
        return $tpl->fetch('spots_table.html');
    }

	/**
	 * create form for editing / creating a house
	 *
	 * @return string HTML code
	 * @author Elias Müller
	 **/
	private function getForm($id = '') {
		$path = 'poker_spot-'.$this->s->action.(($this->s->element != '') ? '/'.$this->s->element : '');
		if ($id != '') {
			$spot = PokerSpot::getInstance($id);
		} else {
			$spot = new PokerSpot();
		}

		$cards = array('A','K','Q','J','T','9','8','7','6','5','4','3','2');
		$hands = array();
		foreach ($cards as $key => $value) {
			foreach ($cards as $k => $v) {
				if ($v == $value) {
					$hands[$key][$k] = $value.$v;
				} elseif ($key > $k) {
					$hands[$key][$k] = $v.$value.'o';
				} else {
					$hands[$key][$k] = $value.$v.'s';
				}
			}
		}
			
		$tpl = new Template('poker');
		$tpl->assign('path', $path);
		$tpl->assign('spot', $spot);
		$tpl->assign('hands', $hands);
		return $tpl->fetch('form_spot.html');
	}
}
?>