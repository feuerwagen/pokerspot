<?php
/**
* Backend controller for the booking module (submodule house).
* 
* @uses: BackendController
* @author: Elias Müller
* @version: 0.1
* @since: chispa 0.5a
* @package: core
* @subpackage: backend
*/

require_once("classes/backend_controller.class.php");
require_once("modules/poker/poker.class.php");
require_once("poker_table.class.php");

class PokerTables extends BackendController {
	protected function __construct() {
		parent::__construct('poker');
	}
	
	/**
    * Returns the section of the main menu, which is currently active
    * @return string The name of the section
    */
    protected function getSection() {
		return 'poker';
    }

	/**
	 * generate the title for the page
	 *
	 * @param string title Existing title (i.e. generated by modules)
 	 * @return string Title for the page
	 * @author Elias Müller
	 **/
	protected function generateTitle($title = '') {
		switch ($this->s->action) {
			case 'list':
				$title = 'Tische';
				break;
		}
		return parent::generateTitle($title);
	}

    /**
    * Build site content depending on requested action.
    */  
    protected function buildSite() {
        switch ($this->s->action) {
			case 'list':
				$content = $this->listTables();
				break;
			case 'create':
			case 'update':
				$content = $this->getForm($this->s->params[0]);
                break;
            case 'delete':
            $content = 'Soll dieser Pokertisch wirklich gelöscht werden?<input type="hidden" value="form/poker/poker_table-delete/'.$this->s->element.'" />';
            	break;
        }
        parent::buildSite($content);
    }
    /**
    * Handle form action
    */
    protected function formAction() {
        switch ($this->s->action) {
			case 'create':
				$table = new PokerTable($this->vars['title'], $this->vars['seats'], $this->vars['blind']);
				if ($table->save()) {
					Error::addMessage('Der Pokertisch wurde erfolgreich angelegt!');
					$this->form['reload'] = array('poker' => array('poker_table' => 'tables'));
					return true;
				}//*/
				break;
			case 'update':
				$table = PokerTable::getInstance($this->s->element);
				$table->title = $this->vars['title'];
				$table->seats = $this->vars['seats'];
				$table->blinds = array(
					'big' => 2*$this->vars['blind'],
					'small' => $this->vars['blind']
				);

				if ($table->save()) {
					Error::addMessage('Die Änderungen wurden erfolgreich gespeichert!');
					$this->form['reload'] = array('poker' => array('poker_table' => 'tables'));
					return true;
				}
				break;
			case 'delete':
				$table = PokerTable::getInstance($this->s->element);
				if (is_object($table->game)) {
					Error::addError('Der Tisch kann nicht gelöscht werden (Spiel ist noch aktiv)!');
					return false;
				}
				if ($table->delete()) {
					Error::addMessage('Der Pokertisch wurde erfolgreich gelöscht!');
					$this->form['reload'] = array('poker' => array('poker_table' => 'tables'));
					return true;
				}
				break;
			case 'reload':
				echo $this->listTables();
				break;
        }
		return false;
    }
    
    // module-specific methods start here
	
	/**
     * Create houses list
	 *
	 * @return string HTML code for houses list
     */
    private function listTables() {
        $db = DB::getInstance();
        $tpl = new Template('poker');

        $tables = PokerTable::getAll();

        $tpl->assign('tables', $tables);
        $tpl->assign('user', $this->s->user);
		$tpl->assign('call', $this->s->post['call']);
        $tpl->assign('permissions', array(
        	'create' => $this->s->user->hasRights("poker:poker_table-create"), 
        	'delete' => $this->s->user->hasRights("poker:poker_table-delete"), 
        	'update' => $this->s->user->hasRights("poker:poker_table-update"), 
        	'update_own' => $this->s->user->hasRights("poker:poker_table-own")
        ));
        return $tpl->fetch('tables_table.html');
    }

	/**
	 * create form for editing / creating a house
	 *
	 * @return string HTML code
	 * @author Elias Müller
	 **/
	private function getForm($id = '') {
		$path = 'poker_table-'.$this->s->action.(($this->s->element != '') ? '/'.$this->s->element : '');
		if ($id != '') {
			$table = PokerTable::getInstance($id);
		} else {
			$table = new PokerTable();
		}
			
		$tpl = new Template('poker');
		$tpl->assign('path', $path);
		$tpl->assign('table', $table);
		return $tpl->fetch('form_table.html');
	}
}
?>